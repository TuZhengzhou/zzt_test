./vscode/launch.json 文件一般如下：我们需要关注的只有包含注释的 4 行

{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "run_code_split",   // 边栏“运行和调试”显示的名称
            "type": "cppdbg",           // 类型为 cpp Debug
            "request": "launch",
            "program": "${workspaceFolder}/code_split", // 调用可执行文件的路径
            "cwd": "${fileDirname}",
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "description": "将反汇编风格设置为 Intel",
                    "text": "-gdb-set disassembly-flavor intel",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "build_code_split"       // 调用前，一般需要在 task.json 中执行可文件的编译，与task.json 中 label 键对应的值要对应
        }
    ]
}

./vscode/task.json 文件一般如下：各行的功能如注释所示
{
    "version": "2.0.0", // 版本信息
    "tasks": [          // tasks 数组
        {
            "type": "cppbuild",             // 类型为执行 cpp 编译
            "label": "build_code_split",    // 与 launch.json 中 preLaunchTask 键对应的值要对应
            "command": "g++",               // 调用 g++
            "args": [
                "-g",                   // 使得可执行文件可调试
                "-Iinc2",               // 其他编译参数
                "-Iincludes",
                "-Wl,-rpath=${workspaceFolder}/lib",
                "code_split_src_call.cpp",
                "-o",
                "code_split",
                "-L${workspaceFolder}/lib",
                "-lcode_split_src_def"
            ],
        }
    ]
}